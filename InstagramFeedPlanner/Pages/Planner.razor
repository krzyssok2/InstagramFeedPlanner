@using InstagramFeedPlanner.Components
@using InstagramFeedPlanner.Models

@page "/planner"

<PageTitle>Planner</PageTitle>

@inject IJSRuntime JS

<button @onclick="() => AddElement()">Add</button>

<div class="planner-page">
    <div class="feed-grid">
        @foreach (var post in Feed.Posts.OrderByDescending(e => e.Position))
        {
            <div class="feed-item"
                 ondragover="event.preventDefault();"
                 style="background: gray;"
                 draggable="true"
                 @ondragstart="() => OnDragStart(post.Id)"
                 @ondrop="(e) => OnDrop(post.Id, e)">
                <div>
                    <button class="delete-button" @onclick="() => OnPostDelete(post.Id)" @onclick:stopPropagation>
                        Delete
                    </button>
                    @if (!string.IsNullOrEmpty(post.Url))
                    {
                        <button class="delete-button" style="margin-top: 25px;" @onclick="() => OnAdjust(post)" @onclick:stopPropagation>
                            Adjust
                        </button>
                    }

                    <button class="delete-button" style="margin-top: 50px;" @onclick="() => OnAdjust(post)" @onclick:stopPropagation>
                        @post.Position
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(post.Url))
                {
                    <img src="@post.Url" style="@GetCropStyle(post.CropData)" draggable="false" />
                }
            </div>
        }
    </div>
</div>




@if (adjustingElement != null)
{
    <div style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.7);z-index:1000;">
        <div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border-radius:10px; aspect-ratio:4/5; width:90vw; max-width:500px; height:auto;">
            <AspectCropper2 Src="@adjustingElement.Url" OnConfirm="@(result => OnCropConfirmed(result))" CropData="@adjustingElement.CropData" />
            <button @onclick="CancelAdjust">Cancel</button>
        </div>
    </div>
}

@code {
    Guid? draggedItemId;
    InstagramElement? adjustingElement;

    private UserFeed Feed = new([]);

    void AddElement() => Feed.AddEmptyPost();

    void OnPostDelete(Guid id) => Feed.DeletePost(id);

    void OnAdjust(InstagramElement element) => adjustingElement = element;

    void CancelAdjust() => adjustingElement = null;

    void OnDragStart(Guid id) => draggedItemId = id;

    async Task OnDrop(Guid id, DragEventArgs e)
    {
        if (draggedItemId != null)
        {
            HandlePostDrop(draggedItemId.Value, id, e);

            draggedItemId = null;
            StateHasChanged();
            return;
        }

        // Image drop logic
        var imageUrl = await JS.InvokeAsync<string>("dragDropHelper.getImageFromDropEvent");
        if (!string.IsNullOrEmpty(imageUrl))
        {
            Feed.InitializeImage(id, imageUrl);
            StateHasChanged();
        }
    }

    private void HandlePostDrop(Guid draggedPost, Guid targetPost, DragEventArgs e)
    {
        if (e.ShiftKey)
        {
            Feed.SwapPosts(draggedPost, targetPost);
        }
        else
        {
            Feed.InsertPostIntoPosition(draggedPost, targetPost);
        }
    }

    private string GetCropStyle(CropData crop)
    {
        if (crop == null || crop.Scale == 0)
        {
            return "object-fit:contain";
        }
       

        Console.WriteLine(crop.Scale);


        // 0.81 - Current container size / preview size TODO: potentially provide cropper container size
        return $"position:absolute;" +
               $"transform:translate({crop.PosX * 0.81}px, {crop.PosY * 0.81}px) scale({crop.Scale * 0.81});" +
               $"transform-origin:top left;";
    }

    async Task OnCropConfirmed((string _, CropData cropData) result)
    {
        if (adjustingElement != null)
        {
            adjustingElement.UpdateCropData(result.cropData);
            adjustingElement = null;
            StateHasChanged();
        }
    }
}

<style>
    .delete-button {
        position: absolute;
        top: 1px; /* adjust as needed */
        right: 1px; /* adjust as needed */
        background: transparent !important;
        margin-left: auto;
        border: none;
        color: red !important;
        cursor: pointer;
        transition: 0.2s ease-in-out;
        z-index:1000;
    }

        .delete-button:hover {
            background-color: transparent;
            transform: scale(1.3);
            opacity: 0.8;
        }

    .planner-page {
        border: 1px solid;        
        height: var(--full-page-height);
        overflow-x: hidden;
        overflow-y:scroll;
        max-height: var(--full-page-height);
    }

    .feed-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1px;
        max-width: 972px;
        margin: 0 auto;
    }

    .feed-item {
        aspect-ratio : 4 / 5;
        width: 324px; /* fill grid cell */
        height: 405px; /* allow height to be automatic */
        max-width: 324px;
        max-height:405px;
        position: relative;
        overflow: hidden;
    }
</style>

<script>
    (function () {
        let lastDropEvent = null;

        document.addEventListener('drop', function (ev) {
            ev.preventDefault();
            lastDropEvent = ev;
        }, true);

        document.addEventListener('dragover', function (ev) {
            ev.preventDefault();
        }, true);

        window.dragDropHelper = {
            getImageFromDropEvent: function () {
                return new Promise((resolve) => {
                    let e = lastDropEvent;
                    lastDropEvent = null;

                    if (!e || !e.dataTransfer || !e.dataTransfer.files || e.dataTransfer.files.length === 0) {
                        resolve("");
                        return;
                    }

                    var file = e.dataTransfer.files[0];
                    var isImage = file.type.startsWith('image/') || ['jpg','jpeg','png','gif','bmp','webp']
                            .includes(file.name.split('.').pop().toLowerCase());

                    if (isImage) {
                        var reader = new FileReader();
                        reader.onload = function (evt) {
                            resolve(evt.target.result);
                        };
                        reader.readAsDataURL(file);
                    } else {
                        resolve("");
                    }
                });
            },
        };
    })();
</script>