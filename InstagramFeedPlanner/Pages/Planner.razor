@page "/planner"

<PageTitle>Planner</PageTitle>

@if (FeedService?.SelectedFeed?.Posts != null)
{
    <div class="planner-wrapper">
        <FeedSidebar Feeds="FeedService.Feeds"
                      SelectedFeedId="FeedService.SelectedFeed.Id"
                      OnFeedSelected="SelectFeed"
                      OnDeleteFeed="DeleteFeed"
                      OnAddNewFeed="AddNewFeed"
                      OnRenameFeed="RenameFeed" />

        <div class="planner-page">
            <button class="planner-button" @onclick="() => AddEmptyPost()">Add new Post</button>

            <div class="feed-grid">
                @foreach (var post in FeedService.SelectedFeed.Posts.OrderByDescending(e => e.Position))
                {
                    <div @key="post.Id"
                         class="feed-item"
                         ondragover="event.preventDefault();"
                         draggable="@(post.IsLocked ? "false" : "true")"
                         @ondragstart="() => OnDragStart(post.Id)"
                         @ondrop="(e) => OnDrop(post.Id, e)">

                        @if (!post.IsLocked)
                        {
                            <button class="delete-button" @onclick="() => OnPostDelete(post.Id)" @onclick:stopPropagation>
                                <XIcon StrokeThickness="4" />
                            </button>
                        }

                        <button class="icon-button2" @onclick="() => OnLock(post.Id)" @onclick:stopPropagation>
                            @if (post.IsLocked)
                            {
                                <PaddleLocked StrokeThickness="2" />
                            }
                            else
                            {
                                <PaddleUnlocked StrokeThickness="2" />
                            }
                        </button>

                        @if (!post.IsLocked && !string.IsNullOrEmpty(post.Url))
                        {
                            <button class="icon-button2" style="margin-top: 34px;" @onclick="() => OnAdjust(post)" @onclick:stopPropagation>
                                <Wrench StrokeThickness="2" />
                            </button>
                        }

                        @if (!string.IsNullOrEmpty(post.Url))
                        {
                            <img src="@post.Url" style="@GetCropStyle(post.CropData)" draggable="@(post.IsLocked ? "false" : "true")" />
                        }

                    </div>
                }
            </div>
        </div>
    </div>
    
}
else
{
    <h1>Loading</h1>
}


@if (adjustingElement != null)
{
    <div style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.7);z-index:1000;">
        <div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border-radius:10px; aspect-ratio:4/5; width:90vw; max-width:500px; height:auto;">
            <AspectCropper Src="@adjustingElement.Url" OnConfirm="@(result => OnCropConfirmed(result))" CropData="@adjustingElement.CropData.ToCropDataModel()" />
            <button @onclick="CancelAdjust">Cancel</button>
        </div>
    </div>
}

<style>
    .planner-button
    {
        width: 100%;
        margin-bottom: 2px;
        border-left:0px;
        border-right:0px;
        border-top:0px;
        border-bottom:1px solid black;
    }

    .planner-wrapper {
        display: flex;
        border:1px solid #ccc;
        height: var(--full-page-height);
    }

    .delete-button {
        position: absolute;
        top: 2px; /* adjust as needed */
        right: 2px; /* adjust as needed */
        border: 1px solid;
        background: transparent;
        cursor: pointer;
        padding: 4px;
        display: flex;
        align-items: center;
        border-radius: 3px;
        z-index: 1;
    }

    .icon-button2{
        position: absolute;
        top: 2px; /* adjust as needed */
        left: 2px; /* adjust as needed */
        border: none;
        border: 1px solid;
        cursor: pointer;
        padding: 4px;
        display: flex;
        align-items: center;
        border-radius: 3px;
        z-index: 1;
    }

    .planner-page {
        height: 100%;
        width:100%;
        overflow-x: hidden;
        overflow-y: scroll;
        max-height: var(--full-page-height);
    }

    .feed-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1px;
        max-width: 972px;
        margin: 0 auto;
        user-select: none;
        -webkit-user-select: none; /* Safari */
        -ms-user-select: none; /* old IE/Edge */
    }

    .feed-item {
        aspect-ratio: 4 / 5;
        width: 324px; /* fill grid cell */
        height: 405px; /* allow height to be automatic */
        background: #ccc;
        max-width: 324px;
        max-height: 405px;
        position: relative;
        overflow: clip;
    }
</style>

<script>
    window.visibilityHandler = {
        register: function (dotNetHelper) {
            document.addEventListener("visibilitychange", () => {
                dotNetHelper.invokeMethodAsync("OnVisibilityChanged", !document.hidden);
            });
        }
    };

    (function () {
        let lastDropEvent = null;

        document.addEventListener('drop', function (ev) {
            ev.preventDefault();
            lastDropEvent = ev;
        }, true);

        document.addEventListener('dragover', function (ev) {
            ev.preventDefault();
        }, true);

        window.dragDropHelper = {
            getImageFromDropEvent: function () {
                return new Promise((resolve) => {
                    let e = lastDropEvent;
                    lastDropEvent = null;

                    if (!e || !e.dataTransfer || !e.dataTransfer.files || e.dataTransfer.files.length === 0) {
                        resolve("");
                        return;
                    }

                    var file = e.dataTransfer.files[0];
                    var isImage = file.type.startsWith('image/') || ['jpg','jpeg','png','webp']
                            .includes(file.name.split('.').pop().toLowerCase());

                    if (isImage) {
                        var reader = new FileReader();
                        reader.onload = function (evt) {
                            resolve(evt.target.result);
                        };
                        reader.readAsDataURL(file);
                    } else {
                        resolve("");
                    }
                });
            },
        };
    })();
</script>