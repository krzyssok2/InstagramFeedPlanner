@page "/planner"

<PageTitle>Planner</PageTitle>

@if (FeedService?.SelectedFeed?.Posts != null)
{
    <div class="planner-wrapper">
        <FeedSidebar Feeds="FeedService.Feeds"
                      SelectedFeedId="FeedService.SelectedFeed.Id"
                      OnFeedSelected="SelectFeed"
                      OnDeleteFeed="DeleteFeed"
                      OnAddNewFeed="AddNewFeed"
                      OnRenameFeed="RenameFeed" />

        <div class="planner-page">
            <button class="planner-button" @onclick="() => AddEmptyPost()">Add new Post</button>
            <div class="feed-grid-container">
                <div class="feed-grid">
                    @foreach (var post in FeedService.SelectedFeed.Posts.OrderByDescending(e => e.Position))
                    {
                        <FeedItem @key="post.Id"
                                  Post="post"
                                  OnDelete="OnPostDelete"
                                  OnToggleLock="OnLock"
                                  OnAdjust="OnAdjust"
                                  OnDragStart="OnDragStart"
                                  OnDrop="OnDrop" />
                    }
                </div>
            </div>
        </div>
    </div>
    
}
else
{
    <h1>Loading</h1>
}


@if (adjustingElement != null)
{
    <AspectCropper Src="@adjustingElement.Url"
                   OnConfirm="@OnCropConfirmed"
                   OnCancel="@CancelAdjust"
                   CropData="@adjustingElement.CropData.ToCropDataModel()" />
}

<style>
    .planner-wrapper {
        display: flex;
        border: 1px solid #ccc;
        height: var(--full-page-height);
    }

    .planner-button {
        width: 100%;
        border-left: 0px;
        border-right: 0px;
        border-top: 0px;
        border-bottom: 1px solid black;
    }

    .planner-page {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
    }

    .feed-grid-container {
        flex: 1;
        overflow-y: auto;
        overflow-x: hidden;
        width: 100%;
    }

    .feed-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        padding: 2px 5px;
        gap: 1px;
        max-width: 972px;
        margin: 0 auto;
        user-select: none;
        -webkit-user-select: none; /* Safari */
        -ms-user-select: none; /* old IE/Edge */
    }
</style>

<script>
    window.visibilityHandler = {
        register: function (dotNetHelper) {
            document.addEventListener("visibilitychange", () => {
                dotNetHelper.invokeMethodAsync("OnVisibilityChanged", !document.hidden);
            });
        }
    };

    (function () {
        let lastDropEvent = null;

        document.addEventListener('drop', function (ev) {
            ev.preventDefault();
            lastDropEvent = ev;
        }, true);

        document.addEventListener('dragover', function (ev) {
            ev.preventDefault();
        }, true);

        window.dragDropHelper = {
            getImageFromDropEvent: function () {
                return new Promise((resolve) => {
                    let e = lastDropEvent;
                    lastDropEvent = null;

                    if (!e || !e.dataTransfer || !e.dataTransfer.files || e.dataTransfer.files.length === 0) {
                        resolve("");
                        return;
                    }

                    var file = e.dataTransfer.files[0];
                    var isImage = file.type.startsWith('image/') || ['jpg','jpeg','png','webp']
                            .includes(file.name.split('.').pop().toLowerCase());

                    if (isImage) {
                        var reader = new FileReader();
                        reader.onload = function (evt) {
                            resolve(evt.target.result);
                        };
                        reader.readAsDataURL(file);
                    } else {
                        resolve("");
                    }
                });
            },
        };
    })();
</script>