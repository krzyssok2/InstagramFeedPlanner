@page "/planner"

<PageTitle>Planner</PageTitle>

@if (FeedService?.SelectedFeed?.Posts != null)
{
    <div class="page">
        <div class="planner-wrapper">
            <div class="feed-sidebar-container">
                <FeedSidebar Feeds="FeedService.Feeds"
                             SelectedFeedId="FeedService.SelectedFeed.Id"
                             OnFeedSelected="SelectFeed"
                             OnDeleteFeed="DeleteFeed"
                             OnAddNewFeed="AddNewFeed"
                             OnRenameFeed="RenameFeed" />

            </div>

            <div class="planner-page">
                <button class="planner-button" @onclick="() => AddEmptyPost()">Add new Post</button>
                <div class="feed-grid-container">
                    <div class="feed-grid">
                        @foreach (var post in FeedService.SelectedFeed.Posts.OrderByDescending(e => e.Position))
                        {
                            <FeedItem @key="post.Id"
                                      Post="post"
                                      IsSelected="@(post.Id == clickedItemId)"
                                      OnDelete="OnPostDelete"
                                      OnToggleLock="OnLock"
                                      OnAdjust="OnAdjust"
                                      OnDragStart="OnDragStart"
                                      OnDrop="OnDrop"
                                      OnUpload="OnImageUpload"
                                      OnClick="OnPostClick" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

}
else
{
    <h1>Loading</h1>
}


@if (adjustingElement != null)
{
    <AspectCropper Src="@adjustingElement.Url"
                   OnConfirm="@OnCropConfirmed"
                   OnCancel="@CancelAdjust"
                   AspectRatio="0.75"
                   CropData="@adjustingElement.CropData.ToCropDataModel()" />
}

<script>
    window.visibilityHandler = {
        register: function (dotNetHelper) {
            document.addEventListener("visibilitychange", () => {
                dotNetHelper.invokeMethodAsync("OnVisibilityChanged", !document.hidden);
            });
        }
    };

    (function () {
        let lastDropEvent = null;

        document.addEventListener('drop', function (ev) {
            ev.preventDefault();
            lastDropEvent = ev;
        }, true);

        document.addEventListener('dragover', function (ev) {
            ev.preventDefault();
        }, true);

        window.dragDropHelper = {
            getImageFromDropEvent: function () {
                return new Promise((resolve) => {
                    let e = lastDropEvent;
                    lastDropEvent = null;

                    if (!e || !e.dataTransfer || !e.dataTransfer.files || e.dataTransfer.files.length === 0) {
                        resolve("");
                        return;
                    }

                    var file = e.dataTransfer.files[0];
                    var isImage = file.type.startsWith('image/') || ['jpg','jpeg','png','webp']
                            .includes(file.name.split('.').pop().toLowerCase());

                    if (isImage) {
                        var reader = new FileReader();
                        reader.onload = function (evt) {
                            resolve(evt.target.result);
                        };
                        reader.readAsDataURL(file);
                    } else {
                        resolve("");
                    }
                });
            },
        };
    })();
</script>