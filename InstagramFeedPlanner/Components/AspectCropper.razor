@using InstagramFeedPlanner.Models
@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="cropper-overlay">
    <div class="cropper-modal">
        <h3>Crop Image</h3>

        <div class="cropper-container" style="width: @(CropWidth)px; height: @(CropHeight)px;">
            <div class="image-container"
                 @onmousedown="StartDrag"
                 @onmousemove="OnDrag"
                 @onmouseup="EndDrag"
                 @onmouseleave="EndDrag"
                 @ontouchstart="StartDrag"
                 @ontouchmove="OnDrag"
                 @ontouchend="EndDrag">
                <img @ref="ImageElement" src="@Src" class="crop-image"
                     style="width: @(DisplayWidth)px; height: @(DisplayHeight)px;
                            transform: translate(@(PosX)px, @(PosY)px);"
                     draggable="false" />
            </div>
            <div class="crop-overlay"></div>
        </div>

        <div class="controls">
            <div class="zoom-control">
                <label>Zoom:</label>
                <input type="range" min="@MinZoom" max="@MaxZoom" step="1"
                       value="@ZoomValue" @oninput="OnZoomChange" />
                <span>@((int)((MinScale + (ZoomValue / 100.0) * (MaxScale - MinScale)) * 100))%</span>
            </div>
        </div>

        <div class="buttons">
            <button class="btn btn-primary" @onclick="ConfirmCrop">Confirm</button>
            <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Src { get; set; } = "";
    [Parameter] public EventCallback<CropDataModel> OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public CropDataModel? CropData { get; set; }
    [Parameter] public double AspectRatio { get; set; } = 1.0; // width/height
    [Parameter] public double ViewportPercentage { get; set; } = 0.6; // 60% of viewport

    private ElementReference ImageElement;

    // Image natural dimensions
    private double NaturalWidth = 800;
    private double NaturalHeight = 600;

    // Crop area dimensions
    private double CropWidth;
    private double CropHeight;

    // Current transform values
    private double Scale = 1.0;
    private double PosX = 0;
    private double PosY = 0;
    private double ZoomValue = 0; // 0-100 for slider

    // Scale bounds
    private double MinScale = 1.0;
    private double MaxScale = 3.0;
    private int MinZoom = 0;
    private int MaxZoom = 100;

    // Calculated display dimensions
    private double DisplayWidth => NaturalWidth * Scale;
    private double DisplayHeight => NaturalHeight * Scale;

    // Mouse/touch dragging
    private bool IsDragging = false;
    private double DragStartX = 0;
    private double DragStartY = 0;
    private double DragStartPosX = 0;
    private double DragStartPosY = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadImageDimensions();
            await CalculateResponsiveCropDimensions();
            CalculateScaleBounds();
            RestoreCropData();
            CenterImageIfNeeded();
            await SetupWindowResize();
            StateHasChanged();
        }
    }

    private async Task LoadImageDimensions()
    {
        try
        {
            var dimensions = await JS.InvokeAsync<ImageDimensions>("getImageDimensions", Src);
            NaturalWidth = dimensions.Width;
            NaturalHeight = dimensions.Height;
        }
        catch
        {
            // Fallback to default dimensions
            NaturalWidth = 800;
            NaturalHeight = 600;
        }
    }

    private async Task CalculateResponsiveCropDimensions()
    {
        try
        {
            var windowSize = await JS.InvokeAsync<WindowSize>("getWindowSize");
            var maxWidth = windowSize.Width * ViewportPercentage;
            var maxHeight = windowSize.Height * ViewportPercentage;

            if (AspectRatio >= 1)
            {
                // Landscape: try to use width constraint first
                CropWidth = System.Math.Min(maxWidth, maxHeight * AspectRatio);
                CropHeight = CropWidth / AspectRatio;

                // If height is too big, constraint by height instead
                if (CropHeight > maxHeight)
                {
                    CropHeight = maxHeight;
                    CropWidth = CropHeight * AspectRatio;
                }
            }
            else
            {
                // Portrait: try to use height constraint first
                CropHeight = System.Math.Min(maxHeight, maxWidth / AspectRatio);
                CropWidth = CropHeight * AspectRatio;

                // If width is too big, constraint by width instead
                if (CropWidth > maxWidth)
                {
                    CropWidth = maxWidth;
                    CropHeight = CropWidth / AspectRatio;
                }
            }
        }
        catch
        {
            // Fallback dimensions
            CropWidth = 400;
            CropHeight = 400 / AspectRatio;
        }
    }

    private async Task SetupWindowResize()
    {
        await JS.InvokeVoidAsync("setupCropperResize", DotNetObjectReference.Create(this));
    }

    private void CalculateScaleBounds()
    {
        // Minimum scale ensures the image covers the entire crop area
        var scaleX = CropWidth / NaturalWidth;
        var scaleY = CropHeight / NaturalHeight;
        MinScale = System.Math.Max(scaleX, scaleY);

        // Maximum scale is 3x the minimum
        MaxScale = MinScale * 3.0;
    }

    private void RestoreCropData()
    {
        if (CropData != null && CropData.Scale > 0)
        {
            Scale = CropData.Scale;
            PosX = CropData.PosX;
            PosY = CropData.PosY;

            // Calculate zoom slider position
            var normalizedScale = (Scale - MinScale) / (MaxScale - MinScale);
            ZoomValue = normalizedScale * 100;
        }
        else
        {
            Scale = MinScale;
            ZoomValue = 0;
        }

        ClampPosition();
    }

    private void CenterImageIfNeeded()
    {
        if (CropData == null || CropData.Scale <= 0)
        {
            // Center the image initially
            PosX = (CropWidth - DisplayWidth) / 2;
            PosY = (CropHeight - DisplayHeight) / 2;
            ClampPosition();
        }
    }

    private void OnZoomChange(ChangeEventArgs e)
    {
        ZoomValue = Convert.ToDouble(e.Value);
        var oldScale = Scale;

        // Calculate new scale
        var normalizedZoom = ZoomValue / 100.0;
        Scale = MinScale + normalizedZoom * (MaxScale - MinScale);

        // Keep the center point stable during zoom
        var centerX = CropWidth / 2.0;
        var centerY = CropHeight / 2.0;

        var imageCenterX = (centerX - PosX) / oldScale;
        var imageCenterY = (centerY - PosY) / oldScale;

        PosX = centerX - imageCenterX * Scale;
        PosY = centerY - imageCenterY * Scale;

        ClampPosition();
        StateHasChanged();
    }

    private void StartDrag(MouseEventArgs e)
    {
        IsDragging = true;
        DragStartX = e.ClientX;
        DragStartY = e.ClientY;
        DragStartPosX = PosX;
        DragStartPosY = PosY;
    }

    private void StartDrag(TouchEventArgs e)
    {
        if (e.Touches.Length > 0)
        {
            IsDragging = true;
            DragStartX = e.Touches[0].ClientX;
            DragStartY = e.Touches[0].ClientY;
            DragStartPosX = PosX;
            DragStartPosY = PosY;
        }
    }

    private void OnDrag(MouseEventArgs e)
    {
        if (!IsDragging) return;

        var deltaX = e.ClientX - DragStartX;
        var deltaY = e.ClientY - DragStartY;

        PosX = DragStartPosX + deltaX;
        PosY = DragStartPosY + deltaY;

        ClampPosition();
        StateHasChanged();
    }

    private void OnDrag(TouchEventArgs e)
    {
        if (!IsDragging || e.Touches.Length == 0) return;

        var deltaX = e.Touches[0].ClientX - DragStartX;
        var deltaY = e.Touches[0].ClientY - DragStartY;

        PosX = DragStartPosX + deltaX;
        PosY = DragStartPosY + deltaY;

        ClampPosition();
        StateHasChanged();
    }

    private void EndDrag(MouseEventArgs e)
    {
        IsDragging = false;
    }

    private void EndDrag(TouchEventArgs e)
    {
        IsDragging = false;
    }

    private void ClampPosition()
    {
        // Ensure image doesn't go beyond crop boundaries
        var minX = CropWidth - DisplayWidth;
        var minY = CropHeight - DisplayHeight;

        PosX = System.Math.Min(0, System.Math.Max(minX, PosX));
        PosY = System.Math.Min(0, System.Math.Max(minY, PosY));
    }

    private async Task ConfirmCrop()
    {
        var cropData = new CropDataModel
        {
            PosX = PosX,
            PosY = PosY,
            Scale = Scale,
            ZoomValue = ZoomValue,
            PreviewWidth = CropWidth,
            PreviewHeight = CropHeight
        };

        await OnConfirm.InvokeAsync(cropData);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync("cleanupCropperResize");
    }

    [JSInvokable]
    public async Task OnWindowResize()
    {
        var oldCropWidth = CropWidth;
        var oldCropHeight = CropHeight;
        var oldMinScale = MinScale;

        await CalculateResponsiveCropDimensions();

        // If size changed significantly, recalculate everything
        if (System.Math.Abs(CropWidth - oldCropWidth) > 10 ||
            System.Math.Abs(CropHeight - oldCropHeight) > 10)
        {
            // Recalculate scale bounds for new crop dimensions
            CalculateScaleBounds();

            // Adjust current scale proportionally
            var scaleRatio = MinScale / oldMinScale;
            Scale *= scaleRatio;

            // Ensure scale is within new bounds
            Scale = System.Math.Max(MinScale, System.Math.Min(MaxScale, Scale));

            // Recalculate zoom slider position based on new scale bounds
            var normalizedScale = (Scale - MinScale) / (MaxScale - MinScale);
            ZoomValue = normalizedScale * 100;

            // Proportionally adjust position
            var widthRatio = CropWidth / oldCropWidth;
            var heightRatio = CropHeight / oldCropHeight;

            PosX *= widthRatio;
            PosY *= heightRatio;

            ClampPosition();
            StateHasChanged();
        }
    }

    private class ImageDimensions
    {
        public double Width { get; set; }
        public double Height { get; set; }
    }

    private class WindowSize
    {
        public double Width { get; set; }
        public double Height { get; set; }
    }
}

<style>
    .cropper-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .cropper-modal {
        background: white;
        border-radius: 8px;
        padding: 20px;
        max-width: 90vw;
        max-height: 90vh;
        overflow: auto;
    }

        .cropper-modal h3 {
            margin-top: 0;
            text-align: center;
        }

    .cropper-container {
        position: relative;
        border: 2px solid #ddd;
        margin: 20px auto;
        overflow: hidden;
        background: #f5f5f5;
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 100%;
        cursor: grab;
        user-select: none;
        overflow: hidden;
    }

        .image-container:active {
            cursor: grabbing;
        }

    .crop-image {
        position: absolute;
        top: 0;
        left: 0;
        transform-origin: top left;
        transition: none;
        pointer-events: none;
        -webkit-user-drag: none;
        user-drag: none;
    }

    .crop-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        pointer-events: none;
        border: 2px dashed rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.3);
    }

    .controls {
        margin: 20px 0;
    }

    .zoom-control {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .zoom-control input[type="range"] {
            flex: 1;
        }

    .buttons {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn:hover {
        opacity: 0.9;
    }

    @@media (max-width: 500px) {
        .cropper-modal

    {
        padding: 15px;
    }

    .zoom-control {
        font-size: 12px;
    }

    }
</style>

<script>
    let resizeTimeout;
    let cropperInstance;
    let handleResize; // Move to global scope

    window.getImageDimensions = (src) => {
        return new Promise((resolve) => {
            const img = new Image();
            img.onload = () => {
                resolve({
                    width: img.naturalWidth,
                    height: img.naturalHeight
                });
            };
            img.onerror = () => {
                resolve({ width: 800, height: 600 }); // fallback
            };
            img.src = src;
        });
    };

    window.getWindowSize = () => {
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    };

    window.setupCropperResize = (dotNetRef) => {
        cropperInstance = dotNetRef;

        handleResize = () => {
            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }
            resizeTimeout = setTimeout(() => {
                if (cropperInstance) {
                    cropperInstance.invokeMethodAsync('OnWindowResize');
                }
            }, 150);
        };

        window.addEventListener('resize', handleResize);
    };

    window.cleanupCropperResize = () => {
        if (handleResize) {
            window.removeEventListener('resize', handleResize);
            handleResize = null;
        }
        if (resizeTimeout) {
            clearTimeout(resizeTimeout);
            resizeTimeout = null;
        }
        cropperInstance = null;
    };
</script>