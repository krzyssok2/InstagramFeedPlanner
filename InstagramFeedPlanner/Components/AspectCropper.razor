@using InstagramFeedPlanner.Models
@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="cropper-overlay">
    <div class="cropper-modal">
        <div class="cropper-container" style="width: @(CropWidth)px; height: @(CropHeight)px;">
            <div class="image-container"
                 @onmousedown="StartDrag"
                 @onmousemove="OnDrag"
                 @onmouseup="EndDrag"
                 @onmouseleave="EndDrag"
                 @ontouchstart="StartDrag"
                 @ontouchmove="OnDrag"
                 @ontouchend="EndDrag"
                 @ontouchmove:preventDefault>
                <img @ref="ImageElement" src="@Src" class="crop-image"
                     style="width: @(DisplayWidth)px; height: @(DisplayHeight)px;
                            transform: translate(@(PosX)px, @(PosY)px);"
                     draggable="false" />
            </div>
            <div class="crop-overlay"></div>
        </div>

        <div class="controls">
            <div class="zoom-control">
                <label>Zoom:</label>
                <input type="range" min="@MinZoom" max="@MaxZoom" step="1"
                       value="@ZoomValue" @oninput="OnZoomChange" />
                <span>@(GetDisplayZoomPercentage())%</span>
            </div>
        </div>

        <div class="buttons">
            <button class="btn" @onclick="Cancel">Cancel</button>
            <button class="btn" @onclick="ConfirmCrop">Confirm</button>            
        </div>
    </div>
</div>

<script>
    let resizeTimeout;
    let cropperInstance;
    let handleResize;

    window.getImageDimensions = (src) => {
        return new Promise((resolve) => {
            const img = new Image();
            img.onload = () => {
                resolve({
                    width: img.naturalWidth,
                    height: img.naturalHeight
                });
            };
            img.onerror = () => {
                resolve({ width: 800, height: 600 });
            };
            img.src = src;
        });
    };

    window.getWindowSize = () => {
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    };

    window.setupCropperResize = (dotNetRef) => {
        cropperInstance = dotNetRef;

        handleResize = () => {
            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }
            resizeTimeout = setTimeout(() => {
                if (cropperInstance) {
                    cropperInstance.invokeMethodAsync('OnWindowResize');
                }
            }, 150);
        };

        window.addEventListener('resize', handleResize);
    };

    window.cleanupCropperResize = () => {
        if (handleResize) {
            window.removeEventListener('resize', handleResize);
            handleResize = null;
        }
        if (resizeTimeout) {
            clearTimeout(resizeTimeout);
            resizeTimeout = null;
        }
        cropperInstance = null;
    };
</script>